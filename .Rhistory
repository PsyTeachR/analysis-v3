demo_by_gender <- data_prp %>%
group_by(Gender) %>% # split data up into groups (here Gender)
summarise(n = n(), # participant number
mean_age = mean(Age, na.rm = TRUE), # mean age
sd_age = sd(Age, na.rm = TRUE)) %>%  # standard deviation of age
ungroup()
demo_by_gender
demo_by_gender <- data_prp %>%
group_by(Gender) %>%
summarise(n = n(),
# n from the line above divided by n from demo_total *100
percentage = n/demo_total$n *100,
mean_age = mean(Age, na.rm = TRUE),
sd_age = sd(Age, na.rm = TRUE)) %>%
ungroup()
demo_by_gender
demo_by_gender <- data_prp %>%
group_by(Gender) %>%
summarise(n = n(),
percentage = round(n/demo_total$n *100, 2), # percentage with 2 decimal places
mean_age = round(mean(Age, na.rm = TRUE), 1), # mean Age with 1 decimal place
sd_age = round(sd(Age, na.rm = TRUE), 3)) %>% # sd Age with 3 decimal places
ungroup()
demo_by_gender
qrp_t1 <- data_prp %>%
#Step 1
select(Code, QRPs_1_Time1:QRPs_11_Time1) %>%
# Step 2
pivot_longer(cols = -Code, names_to = "Items", values_to = "Scores") %>%
# Step 3
group_by(Code) %>% # grouping py participant id
summarise(QRPs_Acceptance_Time1_mean = mean(Scores)) %>% # calculating the average Score
ungroup() # just make it a habit
qrp_step1 <- data_prp %>%
select(Code, QRPs_1_Time1:QRPs_11_Time1)
# show first 5 rows of qrp_step1
head(qrp_step1, n = 5)
renaming_col <- data_prp %>%
select(Participant_ID = Code)
View(renaming_col)
head(renaming_col, n = 5)
library(tidyverse)
dog_data_raw <- read_csv("data/dog_data_raw.csv")
View(dog_data_raw)
dog_data_clean_long <- read_csv("dog_data_clean_long.csv")
dog_data_clean_long <- read_csv("data/dog_data_clean_long.csv")
View(dog_data_clean_long)
dog_data_long <- read_csv("data/dog_data_clean_long.csv")
rm(dog_data_clean_long)
View(dog_data_long)
dog_data_raw <- read_csv("dog_data_raw.csv")
dog_data_wide <- read_csv("data/dog_data_clean_wide.csv")
dog_data_raw <- read_csv("data/dog_data_raw.csv")
View(dog_data_wide)
View(dog_data_raw)
flourishing_brief <- dog_data_raw %>%
select(RID, F1_1:F1_8)
head(flourishing_brief, n = 5)
flourishing_tidy <- dog_data_raw %>%
select(RID, starts_with("F1")) %>%
pivot_longer(cols = -RID, names_to = "Names", values_to = "Response") %>%
group_by(RID) %>%
summarise(Flourishing_pre = mean(Response)) %>%
ungroup()
head(flourishing_tidy, n = 5)
data_flourishing <- dog_data_raw %>%
select(RID, F1_1:F1_8) %>%
pivot_longer(cols = -RID, names_to = "Questionnaire", values_to = "Responses")
View(data_flourishing)
library(tidyverse)
dog_data_raw <- read_csv("data/dog_data_raw.csv")
flourishing_brief <- dog_data_raw %>%
select(RID, starts_with("L1"))
loneliness_brief <- dog_data_raw %>%
select(RID, starts_with("L1"))
dog_data_raw <- read_csv("data/dog_data_raw.csv")
loneliness_brief <- dog_data_raw %>%
select(RID, starts_with("L1"))
head(loneliness_brief, n = 5)
loneliness_tidy <- dog_data_raw %>%
select(RID, starts_with("L1")) %>%
pivot_longer(cols = -RID, names_to = "Names", values_to = "Response") %>%
mutate(Score_corrected = case_when(
Names %in% c("L1_1", "L1_5", "L1_6", "L1_9", "L1_10", "L1_15", "L1_16", "L1_19", "L1_20") ~ 5-Response,
.default = Response
)) %>%
group_by(RID) %>%
summarise(Loneliness_pre = mean(Score_corrected, na.rm = TRUE)) %>%
ungroup()
head(loneliness_tidy, n = 5)
View(dog_data_raw)
# loading tidyverse into the library
library(tidyverse)
# reading in `dog_data_raw.csv`
dog_data_raw <- read_csv("dog_data_raw.csv")
# Task 4: Tidying
loneliness_tidy <- dog_data_raw %>%
# Step 1
select(RID, starts_with("L1")) %>% # select(RID, L1_1:L1_20) also works
# Step 2
pivot_longer(cols = -RID, names_to = "Qs", values_to = "Response") %>%
# Step 3
mutate(Score_corrected = case_when(
Qs %in% c("L1_1", "L1_5", "L1_6", "L1_9", "L1_10", "L1_15", "L1_16", "L1_19", "L1_20") ~ 5-Response,
.default = Response
)) %>%
# Step 4
group_by(RID) %>%
summarise(Loneliness_pre = mean(Score_corrected, na.rm = TRUE)) %>%
ungroup()
View(loneliness_tidy)
PANAS <- dog_data_raw %>%
# Step 1
select(RID, starts_with("PN"))
View(PANAS)
PANAS <- dog_data_raw %>%
# Step 1
select(RID, starts_with("PN")) %>%
# Step 2
pivot_longer(cols = -RID, names_to = "Items", values_to = "Scores")
View(PANAS)
PANAS <- dog_data_raw %>%
# Step 1
select(RID, starts_with("PN")) %>%
# Step 2
pivot_longer(cols = -RID, names_to = "Items", values_to = "Scores") %>%
# Step 3
separate(Items, into = c("Stage", "Item_number"), sep = "_", convert = TRUE)
View(PANAS)
PANAS <- dog_data_raw %>%
# Step 1
select(RID, starts_with("PN")) %>%
# Step 2
pivot_longer(cols = -RID, names_to = "Items", values_to = "Scores") %>%
# Step 3
separate(Items, into = c("Stage", "Item_number"), sep = "_", convert = TRUE) %>%
# Step 4 recode Stage
mutate(Stage = case_match(Stage,
"PN1" ~ "pre",
"PN2" ~ "post")) %>%
# Step 5 identify subscales by item number
mutate(Score_corrected = case_when(
Item_number %in% c(3, 5, 7, 8, 10) ~ "PANAS_PA",
.default = "PANAS_NA"
))
View(PANAS)
PANAS <- dog_data_raw %>%
# Step 1
select(RID, starts_with("PN")) %>%
# Step 2
pivot_longer(cols = -RID, names_to = "Items", values_to = "Scores") %>%
# Step 3
separate(Items, into = c("Stage", "Item_number"), sep = "_", convert = TRUE) %>%
# Step 4 recode Stage
mutate(Stage = case_match(Stage,
"PN1" ~ "pre",
"PN2" ~ "post")) %>%
# Step 5 identify subscales by item number
mutate(Subscales = case_when(
Item_number %in% c(3, 5, 7, 8, 10) ~ "PANAS_PA",
.default = "PANAS_NA"
)) %>%
# Step 6
group_by(RID, Stage, Subscales) %>%
summarise(Score = mean(Scores)) %>%
ungroup()
View(PANAS)
PANAS <- dog_data_raw %>%
# Step 1
select(RID, starts_with("PN")) %>%
# Step 2
pivot_longer(cols = -RID, names_to = "Items", values_to = "Scores") %>%
# Step 3
separate(Items, into = c("Stage", "Item_number"), sep = "_", convert = TRUE) %>%
# Step 4 recode Stage
mutate(Stage = case_match(Stage,
"PN1" ~ "pre",
"PN2" ~ "post")) %>%
# Step 5 identify subscales by item number
mutate(Subscales = case_when(
Item_number %in% c(3, 5, 7, 8, 10) ~ "PANAS_PA",
.default = "PANAS_NA"
)) %>%
# Step 6
group_by(RID, Stage, Subscales) %>%
summarise(Score = mean(Scores)) %>%
ungroup() %>%
# Step 7 - to make the data look like the data in `dog_data_clean_long.csv`
pivot_wider(names_from = Subscales, values_from = Scores)
PANAS <- dog_data_raw %>%
# Step 1
select(RID, starts_with("PN")) %>%
# Step 2
pivot_longer(cols = -RID, names_to = "Items", values_to = "Scores") %>%
# Step 3
separate(Items, into = c("Stage", "Item_number"), sep = "_", convert = TRUE) %>%
# Step 4 recode Stage
mutate(Stage = case_match(Stage,
"PN1" ~ "pre",
"PN2" ~ "post")) %>%
# Step 5 identify subscales by item number
mutate(Subscales = case_when(
Item_number %in% c(3, 5, 7, 8, 10) ~ "PANAS_PA",
.default = "PANAS_NA"
)) %>%
# Step 6
group_by(RID, Stage, Subscales) %>%
summarise(Score = mean(Scores)) %>%
ungroup() %>%
# Step 7 - to make the data look like the data in `dog_data_clean_long.csv`
pivot_wider(names_from = Subscales, values_from = Score)
View(PANAS)
PANAS <- dog_data_raw %>%
# Step 1
select(RID, starts_with("PN"))
head(PANAS, n = 5)
PANAS <- dog_data_raw %>%
# Step 1
select(RID, starts_with("PN")) %>%
# Step 2
pivot_longer(cols = -RID, names_to = "Items", values_to = "Scores")
View(PANAS)
View(PANAS)
284*20
View(PANAS)
PANAS <- dog_data_raw %>%
# Step 1
select(RID, starts_with("PN")) %>%
# Step 2
pivot_longer(cols = -RID, names_to = "Items", values_to = "Scores") %>%
# Step 3
separate(Items, into = c("Stage", "Item_number"), sep = "_", convert = TRUE) %>%
# Step 4 recode Stage
mutate(Stage = case_match(Stage,
"PN1" ~ "pre",
"PN2" ~ "post")) %>%
# Step 5 identify subscales by item number
mutate(Subscales = case_when(
Item_number %in% c(3, 5, 7, 8, 10) ~ "PANAS_PA",
.default = "PANAS_NA"
)) %>%
# Step 6
group_by(RID, Stage, Subscales) %>%
summarise(Score = mean(Scores)) %>%
ungroup() %>%
# Step 7 - to make the data look like the data in `dog_data_clean_long.csv`
pivot_wider(names_from = Subscales, values_from = Score)
head(PANAS, n = 5)
library(tidyverse)
test <- tibble(ID = 1:6, gender = c(1,1,2,3,2,3))
View(test)
test <- test %>% mutate(gender_string = case_match(
1 ~ "female",
2 ~ "male",
3 ~ "non-binary"
))
test <- test %>% mutate(gender_string = case_match(gender,
1 ~ "female",
2 ~ "male",
3 ~ "non-binary"
))
View(test)
test <- test %>% mutate(gender_string = case_match(gender,
1 ~ female,
2 ~ male",
3 ~ non-binary"
test <- test %>% mutate(gender_string = case_match(gender,
1 ~ female,
2 ~ male,
3 ~ non-binary
))
test <- tibble(gender_label = c("female", "male", "non-binary"),
mean_age = c(19.5, 19.3, 20.0),
sd_age = c(0.5725791, 0.5582028, 0.4677369),
min_age = c(18, 18, 19),
max_age = c(22, 20, 21))
View(test)
test <- test %>% mutate(Percentage = max_age*22/100)
View(test)
test <- test %>% ungroup() %>% mutate(Percentage = max_age*22/100)
View(test)
test2 <- test %>% ungroup() %>% group_by(gender_label) %>% summarise(Percentage = max_age*22/100)
View(test2)
test2 <- test %>% ungroup() %>% group_by(gender_label, mean_age) %>% summarise(Percentage = max_age*22/100)
test <- tibble(gender_label = c("female", "male", "non-binary"),
mean_age = c(19.5, 19.3, 20.0),
sd_age = c(0.5725791, 0.5582028, 0.4677369),
min_age = c(18, 18, 19),
max_age = c(22, 20, 21))
library(tidyverse)
test <- tibble(gender_label = c("female", "male", "non-binary"),
mean_age = c(19.5, 19.3, 20.0),
sd_age = c(0.5725791, 0.5582028, 0.4677369),
min_age = c(18, 18, 19),
max_age = c(22, 20, 21))
test2 <- tibble(gender_label = c("female", "male", "non-binary"),
new_col = "column")
View(test2)
test3 <- inner_join(test, test2)
test3 <- inner_join(test, test2, by = "gender_label")
test4 <- inner_join(test, test2, by = "gender_label")
View(test4)
test4 <- inner_join(test, test2, by = gender_label)
# working
test4 <- inner_join(test, test2, by = join_by(gender_label))
test5 <- inner_join(test, test2, by = "gender_label")
rm(test3, test4, test5)
# not working
test3 <- inner_join(test, test2, by = gender_label)
test4 <- inner_join(test, test2, by = join_by("gender_label"))
test2 <- tibble(gender_label = c("female", "male", "non-binary"),
mean_age = c(19.5, 19.3, 22.0),
new_col = "column")
# not working
test3 <- inner_join(test, test2, by = gender_label)
# working
test7 <- inner_join(test, test2)
View(test7)
test8 <- inner_join(test, test2, by = join_by(gender_label))
View(test8)
test8 <- inner_join(test, test2, by = join_by(gender_label, age_mean))
test8 <- inner_join(test, test2, by = join_by(gender_label, mean_age))
View(test8)
test9 <- inner_join(test, test2, by = join_by("gender_label", "mean_age"))
View(test9)
test10 <- inner_join(test, test2, by = "gender_label")
knitr::opts_chunk$set(echo = TRUE)
test <- tibble(group = c("group1", "group2"),
n = c(157, 99),
mean = c(NA, 100.58),
sd = c(NA, 1.25))
View(test)
library(tidyverse)
test <- tibble(gender_label = c("female", "male", "non-binary"),
mean_age = c(19.5, 19.3, 20.0),
sd_age = c(0.5725791, 0.5582028, 0.4677369),
min_age = c(18, 18, 19),
max_age = c(22, 20, 21))
test2 <- tibble(gender_label = c("female", "male", "non-binary"),
mean_age = c(19.5, 19.3, 22.0),
new_col = "column")
# not working
test3 <- inner_join(test, test2, by = gender_label)
# working
test7 <- inner_join(test, test2)
test8 <- inner_join(test, test2, by = join_by(gender_label))
test9 <- inner_join(test, test2, by = join_by("gender_label", "mean_age"))
test10 <- inner_join(test, test2, by = "gender_label")
library(tidyverse)
test <- tibble(gender_label = c("female", "male", "non-binary"),
mean_age = c(19.5, 19.3, 20.0),
sd_age = c(0.5725791, 0.5582028, 0.4677369),
min_age = c(18, 18, 19),
max_age = c(22, 20, 21))
test2 <- tibble(gender_label = c("female", "male", "non-binary"),
mean_age = c(19.5, 19.3, 22.0),
new_col = "column")
# not working
test3 <- inner_join(test, test2, by = gender_label)
# working
test4 <- inner_join(test, test2)
test5 <- inner_join(test, test2, by = join_by(gender_label))
test6 <- inner_join(test, test2, by = join_by("gender_label", "mean_age"))
test7 <- inner_join(test, test2, by = "gender_label")
# working
test4 <- inner_join(test, test2)
test5 <- inner_join(test, test2, by = join_by(gender_label))
test6 <- inner_join(test, test2, by = join_by("gender_label", "mean_age"))
test7 <- inner_join(test, test2, by = "gender_label")
# working
test4 <- inner_join(test, test2)
test5 <- inner_join(test, test2, by = join_by(gender_label))
test6 <- inner_join(test, test2, by = join_by("gender_label", "mean_age"))
test7 <- inner_join(test, test2, by = "gender_label")
test_mean <- tibble(group = c("group1", "group2"),
n = c(157, 99),
mean = c(NA, 100.58),
sd = c(NA, 1.25))
test_less_mean <- tibble(group = c("group1", "group2"),
n = c(157, 99),
mean = c(101.33, 100.58),
sd = c(NA, NA))
View(test_mean)
View(test_less_mean)
test_before <- tibble(col_A = c("value_1", "value_2"),
col_B = c("value_3", "value_4"),
`col c` = c("value_5", "value_6"))
test_after <- tibble(col_A = c("value_1", "value_2"),
col_B = c("value_3", "value_4"),
col_C = c("value_5", "value_6"))
View(test_before)
View(test_after)
View(test_less_mean)
View(test_mean)
test_mean %>% filter(mean != NA)
test10 <- test_mean %>% filter(mean != NA)
View(test10)
test10 <- test_mean %>% filter(mean != "NA")
View(test10)
## I basically have to have 2 code chunks since I tell them to put the data files next to the project, and mine are in a separate folder called data - unless I'll turn this into a fixed path
library(tidyverse)
data_prp <- read_csv("data/prp_data_reduced.csv")
qrp_t1 <- read_csv("data/qrp_t1.csv")
qrp_t1 <- read_csv("data/qrp_t1.csv")
library(tidyverse)
data_prp <- read_csv("prp_data_reduced.csv")
understanding_t1 <- data_prp %>%
# Step 1
select(Code, Understanding_OS_1_Time1:Understanding_OS_12_Time1) %>%
# Step 2 - I picked different column labels this time for some variety
pivot_longer(cols = Understanding_OS_1_Time1:Understanding_OS_12_Time1, names_to = "Understanding_Qs", values_to = "Responses")
understanding_t1 <- understanding_t1 %>%
mutate(Responses_corrected = case_match(Responses, # column of the values to recode
"Not at all confident" ~ 1, # values to recode
"Entirely confident" ~ 7,
.default = Responses # all other values taken from column Responses
))
understanding_t1_step3_v1 <- understanding_t1 %>%
mutate(Responses_corrected = case_match(Responses, # column of the values to recode
"Not at all confident" ~ 1, # values to recode
"Entirely confident" ~ 7,
.default = as.numeric(Responses) # all other values taken from column Responses but as numeric data type
))
understanding_t1_step3_v2 <- understanding_t1 %>%
mutate(Responses_corrected = case_match(Responses, # column of the values to recode
"Not at all confident" ~ "1",
"Entirely confident" ~ "7",
.default = Responses # all other values taken from column Responses (character)
),
Responses_corrected = parse_number(Responses_corrected)) # turning Responses_corrected into a numeric column
understanding_t1_step3_v2 <- understanding_t1 %>%
mutate(Responses_recoded = case_match(Responses, # column of the values to recode
"Not at all confident" ~ 1, # recode all of them
"2" ~ 2,
"3" ~ 3,
"4" ~ 4,
"5" ~ 5,
"6" ~ 6,
"Entirely confident" ~ 7))
understanding_t1 <- understanding_t1 %>%
mutate(Responses_corrected = case_match(Responses, # column of the values to recode
"Not at all confident" ~ 1, # values to recode
"Entirely confident" ~ 7,
.default = as.numeric(Responses) # all other values taken from column Responses but as numeric data type
)) %>%
# Step 4: calculating averages per participant
group_by(Code) %>%
summarise(Time1_Understanding_OS = mean(Responses_corrected)) %>%
ungroup()
understanding_t1 <- data_prp %>%
# Step 1
select(Code, Understanding_OS_1_Time1:Understanding_OS_12_Time1) %>%
# Step 2
pivot_longer(cols = -Code, names_to = "Understanding_Qs", values_to = "Responses") %>%
# Step 3
mutate(Responses_corrected = case_match(Responses, # column of the values to recode
"Not at all confident" ~ 1, # values to recode
"Entirely confident" ~ 7,
.default = as.numeric(Responses) # all other values taken from column Responses but as numeric data type
)) %>%
# Step 4
group_by(Code) %>%
summarise(Time1_Understanding_OS = mean(Responses_corrected)) %>%
ungroup()
sats_t1 <- data_prp %>%
select(Code, SATS28_1_Affect_Time1:SATS28_28_Difficulty_Time1) %>% # Step 1
pivot_longer(cols = -Code, names_to = "Items", values_to = "Response") # Step 2
sats_t1 <- data_prp %>%
# Step 1
select(Code, SATS28_1_Affect_Time1:SATS28_28_Difficulty_Time1) %>%
# Step 2
pivot_longer(cols = -Code, names_to = "Items", values_to = "Response") %>%
# Step 3
separate(Items, into = c(NA, "Item_number", "Subscale", NA), sep = "_", convert = TRUE) %>%
# step 4
mutate(FW_RV = case_when(
Item_number %in% c(2, 3, 4, 6, 7, 8, 9, 12, 13, 16, 17, 19, 20, 21, 23, 25, 26, 27, 28) ~ "Reverse",
.default = "Forward"
),
Scores_corrected = case_when(
FW_RV == "Reverse" ~ 8-Response,
.default = Response
)) %>%
# step 5
group_by(Code, Subscale) %>%
summarise(mean_score = mean(Scores_corrected)) %>%
ungroup() %>%
# step 6
pivot_wider(names_from = Subscale, values_from = mean_score) %>%
rename(SATS28_Affect_Time1_mean = Affect,
SATS28_CognitiveCompetence_Time1_mean = CognitiveCompetence,
SATS28_Value_Time1_mean = Value,
SATS28_Difficulty_Time1_mean = Difficulty)
super <- data_ppr %>%
mutate(Supervisor_15 = 9-supervisor_15_R) %>%
filter(Supervisor_7 = 1) %>%
select(Code, starts_with("Super"), -Supervisor_7, -Supervisor_15_R)
super <- data_prp %>% # spelling mistake in data object
mutate(Supervisor_15 = 8-Supervisor_15_R) %>% # semantic error: 8 minus response for a 7-point scale and supervisor_15_R needs a capital S
filter(Supervisor_7 == 1) %>% # needs a Boolean expression == instead of =
select(Code, starts_with("Super"), -Supervisor_7, -Supervisor_15_R) %>% # no pipe at the end, the rest is actually legit
pivot_longer(cols = -Code, names_to = "Item", values_to = "Response") %>% # pivot_longer instead of pivot_wider
group_by(Code) %>% # Code rather than Time2_Code - the reduced dataset does not contain Time2_Code
summarise(Mean_Supervisor_Support = mean(Response, na.rm = TRUE)) %>% # Score_corrected doesn't exist; needs to be Response
ungroup()
data_prp_final <- data_prp %>%
select(Code:Plan_prereg, Pre_reg_group:Time2_Understanding_OS) %>%
full_join(qrp_t1) %>%
full_join(understanding_t1) %>%
full_join(sats_t1) %>%
full_join(super) %>%
select(Code:Plan_prereg, Pre_reg_group, SATS28_Affect_Time1_mean, SATS28_CognitiveCompetence_Time1_mean, SATS28_Value_Time1_mean, SATS28_Difficulty_Time1_mean, QRPs_Acceptance_Time1_mean, Time1_Understanding_OS, Other_OS_behav_2:Time2_Understanding_OS, Mean_Supervisor_Support)
